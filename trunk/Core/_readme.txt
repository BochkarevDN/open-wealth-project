Данная сборка является базовой, все остальные сборки зависят от неё, она не зависит больше не от какой сбороки.
В ней описывается: 
  1) статический класс Core - основной в системе, связующий все остальные классы
  2) описание всех общих интерфейсов

Работает всё это так:
  1) Программа, например exe сборка, реализованная в проекте Interface4EXE вызывает метод класса Core, 
     наприме GetGlobal("Interface"), но может и любой другой
		2) В классе Core есть статический конструктор, который пробигается по всем сборкам, содержащимся в подпапках 
			OpenWealth
			Plugins
	       и ищит в них классы, реализующие интерфейс IPlugin. Загружает и инициализирует их
		3) Классы, реализующие IPlugin, устанавливают глобальные переменные (SetGlobal), в которых указывают на объекты, 
		   которые реализуют интерфейся описанные в сборке Core
  4) По возвращении управления первого вызова класса Core (тот что в пункте 1) имеем загруженными все плагины, 
    и установленными глобальные переменные, указывающие на реализацию интерфейсов.

Возможно, от глобальных переменных, указывающих на реализацию интерфейсов откажусь, и класс Core будет содержать методы, 
подобные реализрованному сейчас public static IDataManager Data{get{}}, возвращающему объект реализующий IDataManager

В программе используется время в виде int, это позволяет сократить потребляемою память, и увеличить быстродействие. 
Для преобразования времени DateTime в int используется класс DateTime2Int.
Решение не изящное, предложите лучше!